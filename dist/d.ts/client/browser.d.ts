import { NVRAM } from "./nvram";
import * as resource from "./resource";
import { Interpreter } from "./interpreter/interpreter";
import { EventDispatcher, EventQueue } from "./event_queue";
import { Content } from "./content";
import { ResponseMessage } from "../lib/ws_api";
import { AudioNodeProvider, Indicator, IP, Reg } from "./bml_browser";
export type LockedModuleInfo = [moduleName: string, func: number, status: number];
export interface Browser {
    Ureg: string[];
    Greg: string[];
    epgGetEventStartTime(event_ref: string): Date | null;
    epgGetEventDuration(event_ref: string): number;
    epgTune(service_ref: string): number;
    epgTuneToComponent(component_ref: string): number;
    epgIsReserved(event_ref: string, startTime?: Date): number;
    epgReserve(event_ref: string, startTime?: Date): number;
    epgCancelReservation(event_ref: string): string;
    epgRecIsReserved(event_ref: string, startTime?: Date): number;
    epgRecReserve(event_ref: string, startTime?: Date): number;
    epgRecCancelReservation(event_ref: string): number;
    setCurrentDateMode(time_mode: number): number;
    readPersistentArray(filename: string, structure: string): any[] | null;
    writePersistentArray(filename: string, structure: string, data: any[], period?: Date): number;
    checkAccessInfoOfPersistentArray(filename: string): number;
    writePersistentArrayWithAccessCheck(filename: string, structure: string, data: any[], period?: Date): number;
    readPersistentArrayWithAccessCheck(filename: string, structure: string): any[] | null;
    connect(tel: string, speed: number, timeout: number): number;
    connect(tel: string, hostNo: string, bProvider: boolean, speed: number, timeout: number): number;
    disconnect(): number;
    sendTextData(text: string, timeout: number): number;
    receiveTextData(text: string, timeout: number): number;
    setISPParams(ispname: string, tel: string, bProvider: boolean, uid: string, passwd: string, nameServer1: string, nameServer2: string, softCompression: boolean, headerCompression: boolean, idleTime: number, status: number, lineType?: number): number;
    getISPParams(): any[] | null;
    connectPPP(tel: string, bProvider: boolean, uid: string, passwd: string, nameServer1: string, nameServer2: string, softCompression: boolean, headerCompression: boolean, idleTime: number): number;
    connectPPPWithISPParams(idleTime?: number): number;
    disconnectPPP(): number;
    getConnectionType(): number;
    isIPConnected(): number;
    sendTextMail(subject: string, body: string, toAddress: string, ...ccAddress: string[]): [number, number];
    sendMIMEMail(subject: string, src_module: string, toAddress: string, ...ccAddress: string[]): [number, number];
    setCacheResourceOverIP(resources: string[]): number;
    getPrefixNumber(): [number, string, string, string, string];
    vote(tel: string, timeout: number): number;
    reloadActiveDocument(): number;
    getNPT(): number;
    getProgramRelativeTime(): number;
    isBeingBroadcast(event_ref: string): boolean;
    lockModuleOnMemory(module: string | null | undefined): number;
    unlockModuleOnMemory(module: string | null | undefined): number;
    setCachePriority(module: string, priority: number): number;
    getTuningLinkageSource(): string;
    getTuningLinkageType(): number;
    getIRDID(type: number): string | null;
    getBrowserVersion(): string[];
    getProgramID(type: number): string | null;
    getActiveDocument(): string | null;
    lockScreen(): number;
    unlockScreen(): number;
    getBrowserSupport(sProvider: string, functionname: string, ...additionalinfo: string[]): number;
    launchDocument(documentName: string, transitionStyle?: string): number;
    quitDocument(): number;
    launchExApp(uriname: string, MIME_type?: string, ...Ex_info: string[]): number;
    getFreeContentsMemory(number_of_resource?: number): number;
    isSupportedMedia(mediaName: string): number;
    detectComponent(component_ref: string): number;
    lockModuleOnMemoryEx(module: string | null | undefined): number;
    unlockModuleOnMemoryEx(module: string | null | undefined): number;
    unlockAllModulesOnMemory(): number;
    getLockedModuleInfo(): LockedModuleInfo[] | null;
    getBrowserStatus(sProvider: string, statusname: string, additionalinfo: string): number;
    getResidentAppVersion(appName: string): any[] | null;
    isRootCertificateExisting(root_certificate_type: number, root_certificate_id: number, root_certificate_version?: number): number;
    getRootCertificateInfo(): any[] | null;
    playRomSound(soundID: string): number;
    setInterval(func: string, interval: number, iteration: number): number;
    clearTimer(timerID: number): number;
    pauseTimer(timerID: number): number;
    resumeTimer(timerID: number): number;
    setCurrentDateMode(time_mode: number): number;
    random(num: number): number;
    subDate(target: Date, base: Date, unit: number): number;
    addDate(base: Date, time: number, unit: number): Date | number;
    formatNumber(value: number): string | null;
    setCCDisplayStatus(language: number, status: boolean): number;
    getCCDisplayStatus(language: number): number;
    getCCLanguageStatus(language: number): number;
    writeBookmarkArray(filename: string, title: string, dstURI: string, expire_str: string, bmType: string, linkMedia: string, usageFlag: string, extendedStructure?: string, extendedData?: any[]): number;
    readBookmarkArray(filename: string, bmType?: string, extendedStructure?: string): any[] | null;
    deleteBookmark(filename: string): number;
    lockBookmark(filename: string): number;
    unlockBookmark(filename: string): number;
    getBookmarkInfo(): [number, number, string];
    getBookmarkInfo2(region_name: string): [number, number, string];
    X_DPA_startResidentApp(appName: string, showAV: number, returnURI: string, ...Ex_info: string[]): number;
    X_DPA_getComBrowserUA(): string[][];
    (): string[][];
    X_DPA_launchDocWithLink(documentName: string): number;
    X_DPA_getIRDID(type: number): string | null;
    X_DPA_writeCproBM(title: string, dstURI: string, outline: string, CproBMtype: number, expire?: Date): number;
}
export interface AsyncBrowser {
    loadDRCS(DRCS_ref: string): Promise<number>;
    transmitTextDataOverIP(uri: string, text: string, charset: string): Promise<[number, string, string]>;
    confirmIPNetwork(destination: string, confirmType: number, timeout?: number): Promise<[boolean, string | null, number | null] | null>;
    sleep(interval: number): Promise<number | null>;
    unlockScreen(): Promise<number>;
    X_CSP_setAccessInfoToProviderArea(filename: string, structure: string): Promise<number>;
}
export declare class BrowserAPI {
    private readonly resources;
    private readonly eventQueue;
    private readonly eventDispatcher;
    private readonly content;
    private readonly nvram;
    private readonly interpreter;
    private readonly audioNodeProvider;
    private readonly ip;
    private readonly indicator?;
    private readonly ureg;
    private readonly greg;
    private readonly X_DPA_startResidentApp?;
    constructor(resources: resource.Resources, eventQueue: EventQueue, eventDispatcher: EventDispatcher, content: Content, nvram: NVRAM, interpreter: Interpreter, audioNodeProvider: AudioNodeProvider, ip: IP, indicator: Indicator | undefined, ureg: Reg | undefined, greg: Reg | undefined, X_DPA_startResidentApp: ((appName: string, showAV: number, returnURI: string, Ex_info: string[]) => number) | undefined);
    asyncBrowser: AsyncBrowser;
    getGreg(index: number): string | undefined;
    setGreg(index: number, value: string): void;
    getUreg(index: number): string | undefined;
    setUreg(index: number, value: string): void;
    browser: Browser;
    serviceId?: number;
    onMessage(msg: ResponseMessage): void;
}
//# sourceMappingURL=browser.d.ts.map