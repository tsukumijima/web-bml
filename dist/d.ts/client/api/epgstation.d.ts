/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/videos/upload": {
        /** アップロードしたビデオファイルを追加する */
        post: {
            parameters: {};
            responses: {
                /** アップロードしたビデオファイルを追加しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
            requestBody: {
                content: {
                    "multipart/form-data": components["schemas"]["UploadVideoFileOption"];
                };
            };
        };
        parameters: {};
    };
    "/version": {
        /** バージョン情報を取得する */
        get: {
            parameters: {};
            responses: {
                /** バージョン情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["Version"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/thumbnails/cleanup": {
        /** サムネイルをクリーンアップする */
        post: {
            parameters: {};
            responses: {
                /** サムネイルをクリーンアップしました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/thumbnails": {
        /** サムネイルの追加で再生成を開始する */
        post: {
            parameters: {};
            responses: {
                /** サムネイルの再生成を開始しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/tags": {
        /** タグ情報を取得する */
        get: {
            parameters: {
                query: {
                    /** offset */
                    offset?: components["parameters"]["Offset"];
                    /** limit */
                    limit?: components["parameters"]["Limit"];
                    /** name */
                    name?: components["parameters"]["QueryName"];
                    /** 除外する RecordedTagId */
                    excludeTagId?: components["parameters"]["QueryExcludeRecordedTagId"];
                };
            };
            responses: {
                /** タグ情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["RecordedTags"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** タグを追加する */
        post: {
            parameters: {};
            responses: {
                /** タグの追加に成功した */
                201: {
                    content: {
                        "application/json": components["schemas"]["AddedRecordedTag"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddRecordedTagOption"];
                };
            };
        };
        parameters: {};
    };
    "/streams": {
        /** ストリーム情報を取得する */
        get: {
            parameters: {
                query: {
                    /** 半角文字で取得するか */
                    isHalfWidth: components["parameters"]["IsHalfWidth"];
                };
            };
            responses: {
                /** ストリーム情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["StreamInfo"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** 全てのストリームを停止する */
        delete: {
            parameters: {};
            responses: {
                /** 全てのストリームを停止しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/storages": {
        /** ストレージ情報を取得する */
        get: {
            parameters: {};
            responses: {
                /** ストレージ情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["StorageInfo"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/schedules/search": {
        /** 番組検索結果を取得する */
        post: {
            parameters: {};
            responses: {
                /** 番組検索結果を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["ScheduleProgramItem"][];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ScheduleSearchOption"];
                };
            };
        };
        parameters: {};
    };
    "/schedules/broadcasting": {
        /** 放映中の番組情報を取得する */
        get: {
            parameters: {
                query: {
                    /** 追加時間 (ms) */
                    time?: components["parameters"]["AddtionTime"];
                    /** 半角文字で取得するか */
                    isHalfWidth: components["parameters"]["IsHalfWidth"];
                };
            };
            responses: {
                /** 放映中の番組情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["Schedules"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/schedules": {
        /** 番組表情報を取得する */
        get: {
            parameters: {
                query: {
                    /** 開始時刻 */
                    startAt: components["parameters"]["StartAt"];
                    /** 終了時刻 */
                    endAt: components["parameters"]["EndAt"];
                    /** 半角文字で取得するか */
                    isHalfWidth: components["parameters"]["IsHalfWidth"];
                    /** rawExtended が必要か */
                    needsRawExtended?: components["parameters"]["NeedsRawExtended"];
                    /** 無料放送のみ取得するか (true: 無料放送, false: 有料放送, 無指定: 全て) */
                    isFree?: components["parameters"]["IsFreeProgram"];
                    /** GR */
                    GR: components["parameters"]["requiredGR"];
                    /** BS */
                    BS: components["parameters"]["requiredBS"];
                    /** CS */
                    CS: components["parameters"]["requiredCS"];
                    /** SKY */
                    SKY: components["parameters"]["requiredSKY"];
                };
            };
            responses: {
                /** 番組表情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["Schedules"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/rules/keyword": {
        /** ルールをキーワード検索する */
        get: {
            parameters: {
                query: {
                    /** offset */
                    offset?: components["parameters"]["Offset"];
                    /** limit */
                    limit?: components["parameters"]["Limit"];
                    /** キーワード */
                    keyword?: components["parameters"]["QueryKeyword"];
                };
            };
            responses: {
                /** ルールをキーワード検索結果を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["RuleKeywordInfo"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** ルールを追加する */
        post: {
            parameters: {};
            responses: {
                /** ルールの追加に成功した */
                201: {
                    content: {
                        "application/json": components["schemas"]["AddedRule"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddRuleOption"];
                };
            };
        };
        parameters: {};
    };
    "/rules": {
        /** ルール情報を取得する */
        get: {
            parameters: {
                query: {
                    /** offset */
                    offset?: components["parameters"]["Offset"];
                    /** limit */
                    limit?: components["parameters"]["Limit"];
                    /** 予約情報取得タイプ */
                    type?: components["parameters"]["GetReserveType"];
                    /** キーワード */
                    keyword?: components["parameters"]["QueryKeyword"];
                };
            };
            responses: {
                /** ルール情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["Rules"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** ルールを追加する */
        post: {
            parameters: {};
            responses: {
                /** ルールの追加に成功した */
                201: {
                    content: {
                        "application/json": components["schemas"]["AddedRule"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddRuleOption"];
                };
            };
        };
        parameters: {};
    };
    "/reserves/update": {
        /** 予約情報の更新を開始する */
        post: {
            parameters: {};
            responses: {
                /** 予約情報の更新を開始しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/reserves/lists": {
        /** 予約リスト情報を取得する */
        get: {
            parameters: {
                query: {
                    /** 開始時刻 */
                    startAt: components["parameters"]["StartAt"];
                    /** 終了時刻 */
                    endAt: components["parameters"]["EndAt"];
                };
            };
            responses: {
                /** 予約リスト情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["ReserveLists"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/reserves/cnts": {
        /** 予約数を取得する */
        get: {
            parameters: {};
            responses: {
                /** 予約数を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["ReserveCnts"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/reserves": {
        /** 予約情報を取得する */
        get: {
            parameters: {
                query: {
                    /** offset */
                    offset?: components["parameters"]["Offset"];
                    /** limit */
                    limit?: components["parameters"]["Limit"];
                    /** 予約情報取得タイプ */
                    type?: components["parameters"]["GetReserveType"];
                    /** 半角文字で取得するか */
                    isHalfWidth: components["parameters"]["IsHalfWidth"];
                    /** ルールid */
                    ruleId?: components["parameters"]["QueryRuleId"];
                };
            };
            responses: {
                /** 予約情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["Reserves"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** 予約を追加する */
        post: {
            parameters: {};
            responses: {
                /** 予約の追加に成功した */
                201: {
                    content: {
                        "application/json": components["schemas"]["AddedReserve"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ManualReserveOption"];
                };
            };
        };
        parameters: {};
    };
    "/recording/resettimer": {
        /** 予約タイマーを再設定する */
        post: {
            parameters: {};
            responses: {
                /** 予約タイマーを再設定しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/recording": {
        /** 録画中情報を取得する */
        get: {
            parameters: {
                query: {
                    /** offset */
                    offset?: components["parameters"]["Offset"];
                    /** limit */
                    limit?: components["parameters"]["Limit"];
                    /** 半角文字で取得するか */
                    isHalfWidth: components["parameters"]["IsHalfWidth"];
                };
            };
            responses: {
                /** 録画中情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["Records"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/recorded/options": {
        /** 録画検索オプションを取得する */
        get: {
            parameters: {};
            responses: {
                /** 録画検索オプションを取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["RecordedSearchOptions"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/recorded/cleanup": {
        /** 録画をクリーンアップする */
        post: {
            parameters: {};
            responses: {
                /** 録画をクリーンアップしました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/recorded": {
        /** 録画情報を取得する */
        get: {
            parameters: {
                query: {
                    /** 半角文字で取得するか */
                    isHalfWidth: components["parameters"]["IsHalfWidth"];
                    /** offset */
                    offset?: components["parameters"]["Offset"];
                    /** limit */
                    limit?: components["parameters"]["Limit"];
                    /** 逆順で取得するか */
                    isReverse?: components["parameters"]["IsReverse"];
                    /** ルールid */
                    ruleId?: components["parameters"]["QueryRuleId"];
                    /** 放送局 id */
                    channelId?: components["parameters"]["QueryChannelId"];
                    /** ジャンル */
                    genre?: components["parameters"]["QueryProgramGenre"];
                    /** キーワード */
                    keyword?: components["parameters"]["QueryKeyword"];
                    /** オリジナルファイルを含むか */
                    hasOriginalFile?: components["parameters"]["QueryHasOriginalFile"];
                };
            };
            responses: {
                /** 録画情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["Records"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** 録画番組情報を新規作成する */
        post: {
            parameters: {};
            responses: {
                /** 録画番組情報の新規作成に成功した */
                201: {
                    content: {
                        "application/json": components["schemas"]["CreatedNewRecorded"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateNewRecordedOption"];
                };
            };
        };
        parameters: {};
    };
    "/iptv/epg.xml": {
        /** IPTV epg を取得する */
        get: {
            parameters: {
                query: {
                    /** 半角文字で取得するか */
                    isHalfWidth?: components["parameters"]["IPTVIsHalfWidth"];
                    /** 取得日数 */
                    days?: components["parameters"]["IPTVDays"];
                };
            };
            responses: {
                /** epg を取得しました */
                200: {
                    content: {
                        "application/xml": unknown;
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/iptv/channel.m3u8": {
        /** IPTV channel list を取得する */
        get: {
            parameters: {
                query: {
                    /** 半角文字で取得するか */
                    isHalfWidth?: components["parameters"]["IPTVIsHalfWidth"];
                    /** ストリーミング設定 */
                    mode: components["parameters"]["StreamMode"];
                };
            };
            responses: {
                /** channel list を取得しました */
                200: {
                    content: {
                        "application/x-mpegURL": unknown;
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/encode": {
        /** エンコード情報を取得する */
        get: {
            parameters: {
                query: {
                    /** 半角文字で取得するか */
                    isHalfWidth: components["parameters"]["IsHalfWidth"];
                };
            };
            responses: {
                /** エンコード情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["EncodeInfo"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** エンコードを追加する */
        post: {
            parameters: {};
            responses: {
                /** エンコードの追加に成功した */
                201: {
                    content: {
                        "application/json": components["schemas"]["AddedEncode"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddManualEncodeProgramOption"];
                };
            };
        };
        parameters: {};
    };
    "/config": {
        /** config 情報を取得する */
        get: {
            parameters: {};
            responses: {
                /** config 情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["Config"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/channels": {
        /** 放送局情報を取得する */
        get: {
            parameters: {};
            responses: {
                /** 放送局情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["ChannelItems"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/videos/{videoFileId}/playlist": {
        /** ビデオプレイリストを取得する */
        get: {
            parameters: {
                path: {
                    /** video file id */
                    videoFileId: components["parameters"]["PathVideoFileId"];
                };
            };
            responses: {
                /** ビデオプレイリストを取得しました */
                200: {
                    content: {
                        "application/x-mpegURL": unknown;
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/videos/{videoFileId}/kodi": {
        /** ビデオリンクを kodi へ送信する */
        post: {
            parameters: {
                path: {
                    /** video file id */
                    videoFileId: components["parameters"]["PathVideoFileId"];
                };
            };
            responses: {
                /** ビデオリンクを kodi へ送信するしました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SendVideoLinkToKodiOption"];
                };
            };
        };
        parameters: {};
    };
    "/videos/{videoFileId}/duration": {
        /** 動画の長さを取得する */
        get: {
            parameters: {
                path: {
                    /** video file id */
                    videoFileId: components["parameters"]["PathVideoFileId"];
                };
            };
            responses: {
                /** 動画の長さを取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["VideoFileDuration"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/videos/{videoFileId}": {
        /** ビデオファイルを取得する */
        get: {
            parameters: {
                path: {
                    /** video file id */
                    videoFileId: components["parameters"]["PathVideoFileId"];
                };
                query: {
                    /** ファイルをダウンロードするか */
                    isDownload?: components["parameters"]["IsDownload"];
                };
            };
            responses: {
                /** ビデオファイルを取得しました */
                200: {
                    content: {
                        "video/mp2t": unknown;
                        "video/mp4": unknown;
                        "video/x-matroska": unknown;
                        "video/webm": unknown;
                        "application/octet-stream": unknown;
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** ビデオファイルを削除する */
        delete: {
            parameters: {
                path: {
                    /** video file id */
                    videoFileId: components["parameters"]["PathVideoFileId"];
                };
            };
            responses: {
                /** ビデオファイルを削除しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/thumbnails/videos/{videoFileId}": {
        /** サムネイルの生成を開始させる */
        post: {
            parameters: {
                path: {
                    /** video file id */
                    videoFileId: components["parameters"]["PathVideoFileId"];
                };
            };
            responses: {
                /** 追加サムネイルの生成を開始しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/thumbnails/{thumbnailId}": {
        /** サムネイルを取得する */
        get: {
            parameters: {
                path: {
                    /** thumbnail id */
                    thumbnailId: components["parameters"]["PathThumbnailId"];
                };
            };
            responses: {
                /** サムネイルを取得しました */
                200: {
                    content: {
                        "image/jpeg": unknown;
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** サムネイルを削除する */
        delete: {
            parameters: {
                path: {
                    /** thumbnail id */
                    thumbnailId: components["parameters"]["PathThumbnailId"];
                };
            };
            responses: {
                /** サムネイルを削除しました */
                200: {
                    content: {
                        "image/jpeg": unknown;
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/tags/{tagId}/relate": {
        /** 録画番組とタグを関連付けする */
        put: {
            parameters: {
                path: {
                    /** recorded tag id */
                    tagId: components["parameters"]["PathRecordedTagId"];
                };
            };
            responses: {
                /** 録画番組とタグの関連付けに成功した */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RelateRecordedTagOption"];
                };
            };
        };
        /** 録画番組とタグの関連付けを削除する */
        delete: {
            parameters: {
                path: {
                    /** recorded tag id */
                    tagId: components["parameters"]["PathRecordedTagId"];
                };
                query: {
                    /** recorded id */
                    recordedId?: components["parameters"]["QueryRecordedId"];
                };
            };
            responses: {
                /** 録画番組とタグの関連付けを削除しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/tags/{tagId}": {
        /** タグ名を変更する */
        put: {
            parameters: {
                path: {
                    /** recorded tag id */
                    tagId: components["parameters"]["PathRecordedTagId"];
                };
            };
            responses: {
                /** タグの更新に成功した */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddRecordedTagOption"];
                };
            };
        };
        /** タグを削除する */
        delete: {
            parameters: {
                path: {
                    /** recorded tag id */
                    tagId: components["parameters"]["PathRecordedTagId"];
                };
            };
            responses: {
                /** タグを削除しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/streams/recorded/{videoFileId}/webm": {
        /** 録画 WebM ストリームを取得する */
        get: {
            parameters: {
                path: {
                    /** video file id */
                    videoFileId: components["parameters"]["PathVideoFileId"];
                };
                query: {
                    /** 再生位置 */
                    ss: components["parameters"]["StreamPlayPosition"];
                    /** ストリーミング設定 */
                    mode: components["parameters"]["StreamMode"];
                };
            };
            responses: {
                /** 録画 WebM ストリーム */
                200: {
                    content: {
                        "video/webm": unknown;
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/streams/recorded/{videoFileId}/mp4": {
        /** 録画 mp4 ストリームを取得する */
        get: {
            parameters: {
                path: {
                    /** video file id */
                    videoFileId: components["parameters"]["PathVideoFileId"];
                };
                query: {
                    /** 再生位置 */
                    ss: components["parameters"]["StreamPlayPosition"];
                    /** ストリーミング設定 */
                    mode: components["parameters"]["StreamMode"];
                };
            };
            responses: {
                /** 録画 mp4 ストリーム */
                200: {
                    content: {
                        "video/mp4": unknown;
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/streams/recorded/{videoFileId}/hls": {
        /** 録画 HLS ストリームを開始する */
        get: {
            parameters: {
                path: {
                    /** video file id */
                    videoFileId: components["parameters"]["PathVideoFileId"];
                };
                query: {
                    /** 再生位置 */
                    ss: components["parameters"]["StreamPlayPosition"];
                    /** ストリーミング設定 */
                    mode: components["parameters"]["StreamMode"];
                };
            };
            responses: {
                /** 録画 HLS ストリームを開始しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["StartStreamInfo"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/streams/live/{channelId}/webm": {
        /** ライブ WebM ストリームを取得する */
        get: {
            parameters: {
                path: {
                    /** 放送局 id */
                    channelId: components["parameters"]["PathChannelId"];
                };
                query: {
                    /** ストリーミング設定 */
                    mode: components["parameters"]["StreamMode"];
                };
            };
            responses: {
                /** ライブ WebM ストリーム */
                200: {
                    content: {
                        "video/webm": unknown;
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/streams/live/{channelId}/mp4": {
        /** ライブ mp4 ストリームを取得する */
        get: {
            parameters: {
                path: {
                    /** 放送局 id */
                    channelId: components["parameters"]["PathChannelId"];
                };
                query: {
                    /** ストリーミング設定 */
                    mode: components["parameters"]["StreamMode"];
                };
            };
            responses: {
                /** ライブ mp4 ストリーム */
                200: {
                    content: {
                        "video/mp4": unknown;
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/streams/live/{channelId}/m2tsll": {
        /** ライブ M2TS Low Latency ストリームを取得する */
        get: {
            parameters: {
                path: {
                    /** 放送局 id */
                    channelId: components["parameters"]["PathChannelId"];
                };
                query: {
                    /** ストリーミング設定 */
                    mode: components["parameters"]["StreamMode"];
                };
            };
            responses: {
                /** ライブ M2TS Low Latency ストリーム */
                200: {
                    content: {
                        "video/mp2t": unknown;
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/streams/live/{channelId}/m2ts/playlist": {
        /** ライブ M2TS ストリームプレイリストを取得する */
        get: {
            parameters: {
                path: {
                    /** 放送局 id */
                    channelId: components["parameters"]["PathChannelId"];
                };
                query: {
                    /** ストリーミング設定 */
                    mode: components["parameters"]["StreamMode"];
                };
            };
            responses: {
                /** ライブ M2TS ストリームプレイリストを取得しました */
                200: {
                    content: {
                        "application/x-mpegURL": unknown;
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/streams/live/{channelId}/m2ts": {
        /** ライブ M2TS ストリームを取得する */
        get: {
            parameters: {
                path: {
                    /** 放送局 id */
                    channelId: components["parameters"]["PathChannelId"];
                };
                query: {
                    /** ストリーミング設定 */
                    mode: components["parameters"]["StreamMode"];
                };
            };
            responses: {
                /** ライブ M2TS ストリーム */
                200: {
                    content: {
                        "video/mp2t": unknown;
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/streams/live/{channelId}/hls": {
        /** ライブ HLS ストリームを開始する */
        get: {
            parameters: {
                path: {
                    /** 放送局 id */
                    channelId: components["parameters"]["PathChannelId"];
                };
                query: {
                    /** ストリーミング設定 */
                    mode: components["parameters"]["StreamMode"];
                };
            };
            responses: {
                /** ライブ HLS ストリームを開始しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["StartStreamInfo"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/streams/{streamId}/keep": {
        /** ストリーム停止タイマーを更新する */
        put: {
            parameters: {
                path: {
                    /** ストリーム id */
                    streamId: components["parameters"]["PathStreamId"];
                };
            };
            responses: {
                /** ストリーム停止タイマーを更新しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/streams/{streamId}": {
        /** ストリームを停止する */
        delete: {
            parameters: {
                path: {
                    /** ストリーム id */
                    streamId: components["parameters"]["PathStreamId"];
                };
            };
            responses: {
                /** ストリームを停止しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/schedules/detail/{programId}": {
        /** 指定された番組表情報を取得する */
        get: {
            parameters: {
                path: {
                    /** program id */
                    programId: components["parameters"]["PathProgramId"];
                };
                query: {
                    /** 半角文字で取得するか */
                    isHalfWidth: components["parameters"]["IsHalfWidth"];
                };
            };
            responses: {
                /** 指定された番組表情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["ScheduleProgramItem"];
                    };
                };
                /** Not Found */
                404: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/schedules/{channelId}": {
        /** 指定された放送局の番組表情報を取得する */
        get: {
            parameters: {
                path: {
                    /** 放送局 id */
                    channelId: components["parameters"]["PathChannelId"];
                };
                query: {
                    /** 開始時刻 */
                    startAt: components["parameters"]["StartAt"];
                    /** 取得日数 */
                    days: components["parameters"]["Days"];
                    /** 半角文字で取得するか */
                    isHalfWidth: components["parameters"]["IsHalfWidth"];
                    /** rawExtended が必要か */
                    needsRawExtended?: components["parameters"]["NeedsRawExtended"];
                    /** 無料放送のみ取得するか (true: 無料放送, false: 有料放送, 無指定: 全て) */
                    isFree?: components["parameters"]["IsFreeProgram"];
                };
            };
            responses: {
                /** 指定された放送局の番組表情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["Schedules"];
                    };
                };
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/rules/{ruleId}/enable": {
        /** ルールを有効化する */
        put: {
            parameters: {
                path: {
                    /** ルールid */
                    ruleId: components["parameters"]["PathRuleId"];
                };
            };
            responses: {
                /** ルールを有効化しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/rules/{ruleId}/disable": {
        /** ルールを無効化する */
        put: {
            parameters: {
                path: {
                    /** ルールid */
                    ruleId: components["parameters"]["PathRuleId"];
                };
            };
            responses: {
                /** ルールを無効化しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/rules/{ruleId}": {
        /** ルールを取得する */
        get: {
            parameters: {
                path: {
                    /** ルールid */
                    ruleId: components["parameters"]["PathRuleId"];
                };
            };
            responses: {
                /** ルールを削除しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["Rule"];
                    };
                };
                /** 指定された id の rule がない */
                404: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** ルールを更新する */
        put: {
            parameters: {
                path: {
                    /** ルールid */
                    ruleId: components["parameters"]["PathRuleId"];
                };
            };
            responses: {
                /** ルールの更新に成功した */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddRuleOption"];
                };
            };
        };
        /** ルールを削除する */
        delete: {
            parameters: {
                path: {
                    /** ルールid */
                    ruleId: components["parameters"]["PathRuleId"];
                };
            };
            responses: {
                /** ルールを削除しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/reserves/{reserveId}/skip": {
        /** 予約の除外状態を解除する */
        delete: {
            parameters: {
                path: {
                    /** 予約id */
                    reserveId: components["parameters"]["PathReserveId"];
                };
            };
            responses: {
                /** 予約の除外状態を解除しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/reserves/{reserveId}/overlap": {
        /** 予約の重複状態を解除する */
        delete: {
            parameters: {
                path: {
                    /** 予約id */
                    reserveId: components["parameters"]["PathReserveId"];
                };
            };
            responses: {
                /** 予約の重複状態を解除しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/reserves/{reserveId}": {
        /** 指定された予約情報を取得する */
        get: {
            parameters: {
                path: {
                    /** 予約id */
                    reserveId: components["parameters"]["PathReserveId"];
                };
                query: {
                    /** 半角文字で取得するか */
                    isHalfWidth: components["parameters"]["IsHalfWidth"];
                };
            };
            responses: {
                /** 指定された予約情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["ReserveItem"];
                    };
                };
                /** Not Found */
                404: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** 手動予約を更新する */
        put: {
            parameters: {
                path: {
                    /** 予約id */
                    reserveId: components["parameters"]["PathReserveId"];
                };
            };
            responses: {
                /** 手動予約の更新に成功した */
                201: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EditManualReserveOption"];
                };
            };
        };
        /** 予約を削除する */
        delete: {
            parameters: {
                path: {
                    /** 予約id */
                    reserveId: components["parameters"]["PathReserveId"];
                };
            };
            responses: {
                /** 予約を削除しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/recorded/{recordedId}/unprotect": {
        /** 録画を自動削除対象に戻す */
        put: {
            parameters: {
                path: {
                    /** recorded id */
                    recordedId: components["parameters"]["PathRecordedId"];
                };
            };
            responses: {
                /** 録画を自動削除対象に戻しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/recorded/{recordedId}/protect": {
        /** 録画を自動削除対象から除外する */
        put: {
            parameters: {
                path: {
                    /** recorded id */
                    recordedId: components["parameters"]["PathRecordedId"];
                };
            };
            responses: {
                /** 録画を自動削除対象から除外しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/recorded/{recordedId}/encode": {
        /** エンコードを停止する */
        delete: {
            parameters: {
                path: {
                    /** recorded id */
                    recordedId: components["parameters"]["PathRecordedId"];
                };
            };
            responses: {
                /** エンコードを停止しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/recorded/{recordedId}": {
        /** 録画詳細情報を取得する */
        get: {
            parameters: {
                path: {
                    /** recorded id */
                    recordedId: components["parameters"]["PathRecordedId"];
                };
                query: {
                    /** 半角文字で取得するか */
                    isHalfWidth: components["parameters"]["IsHalfWidth"];
                };
            };
            responses: {
                /** 録画詳細情報を取得しました */
                200: {
                    content: {
                        "application/json": components["schemas"]["RecordedItem"];
                    };
                };
                /** 指定された id の 録画詳細情報がない */
                404: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** 録画を削除する */
        delete: {
            parameters: {
                path: {
                    /** recorded id */
                    recordedId: components["parameters"]["PathRecordedId"];
                };
            };
            responses: {
                /** 録画を削除しました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/encode/{encodeId}": {
        /** エンコードをキャンセルする */
        delete: {
            parameters: {
                path: {
                    /** エンコード id */
                    encodeId: components["parameters"]["PathEncodeId"];
                };
            };
            responses: {
                /** エンコードをキャンセルしました */
                200: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/dropLogs/{dropLogFileId}": {
        /** ドロップログを取得する */
        get: {
            parameters: {
                path: {
                    /** drop log file id */
                    dropLogFileId: components["parameters"]["PathDropLogFileId"];
                };
                query: {
                    /** ファイル最大サイズ (kByte) */
                    maxsize?: components["parameters"]["LogFileMaxSize"];
                };
            };
            responses: {
                /** ドロップログを取得しました */
                200: {
                    content: {
                        "text/plain": unknown;
                    };
                };
                /** Not Found */
                404: unknown;
                /** ファイルサイズが大きすぎる */
                416: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
    "/channels/{channelId}/logo": {
        /** 放送局のロゴを取得する */
        get: {
            parameters: {
                path: {
                    /** 放送局 id */
                    channelId: components["parameters"]["PathChannelId"];
                };
            };
            responses: {
                /** 放送局のロゴを取得しました */
                200: {
                    content: {
                        "image/png": unknown;
                    };
                };
                /** Not Found */
                404: unknown;
                /** 予期しないエラー */
                default: {
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        parameters: {};
    };
}
export interface components {
    schemas: {
        /** @description 時刻 (ms) */
        UnixtimeMS: number;
        /** @description 放送局 id */
        ChannelId: number;
        /** @description service id */
        ServiceId: number;
        /** @description network id */
        NetworkId: number;
        /** @description program id */
        ProgramId: number;
        /** @description ルール id */
        RuleId: number;
        /** @description 予約 id */
        ReserveId: number;
        /** @description 録画済み番組 id */
        RecordedId: number;
        /** @description 録画済み番組履歴管理 id */
        RecordedHistoryId: number;
        /** @description ビデオファイル id */
        VideoFileId: number;
        /**
         * @description ビデオファイル形式
         * @enum {string}
         */
        VideoFileType: "ts" | "encoded";
        /** @description サムネイル id */
        ThumbnailId: number;
        /** @description ドロップログファイル id */
        DropLogFileId: number;
        /** @description 録画 tag id */
        RecordedTagId: number;
        /** @description エンコード id */
        EncodeId: number;
        /**
         * @description 放送波タイプ
         * @enum {string}
         */
        ChannelType: "GR" | "BS" | "CS" | "SKY";
        /** @description ジャンル */
        ProgramGenreLv1: number;
        /** @description サブジャンル */
        ProgramGenreLv2: number;
        /**
         * @description 番組ビデオコーデック
         * @enum {string}
         */
        ProgramVideoType: "mpeg2" | "h.264" | "h.265";
        /**
         * @description 番組ビデオ解像度
         * @enum {string}
         */
        ProgramVideoResolution: "240p" | "480i" | "480p" | "720p" | "1080i" | "1080p" | "2160p" | "4320p";
        /**
         * @description 番組オーディオサンプリングレート
         * @enum {integer}
         */
        ProgramAudioSamplingRate: 16000 | 22050 | 24000 | 32000 | 44100 | 48000;
        /** @description ストリーム id */
        StreamId: number;
        /**
         * @description ストリームの種類
         * @enum {string}
         */
        StreamType: "LiveStream" | "LiveHLS" | "RecordedStream" | "RecordedHLS";
        /** @description URL Scheme */
        URLSchemeInfo: {
            ios?: string;
            android?: string;
            mac?: string;
            win?: string;
        };
        /** @description M2TS形式ストリーミングパラメータ */
        M2TSStreamParam: {
            /** @description 表示名 */
            name: string;
            /** @description 無変換か */
            isUnconverted: boolean;
        };
        /** @description コンフィグ */
        Config: {
            /** @description socket.io 通信で使用するポート */
            socketIOPort: number;
            /** @description 有効な放送波情報 */
            broadcast: {
                GR: boolean;
                BS: boolean;
                CS: boolean;
                SKY: boolean;
            };
            /** @description 指定可能な録画ディレクトリ名 */
            recorded: string[];
            /** @description エンコードモード */
            encode: string[];
            /** @description URL Scheme 情報 */
            urlscheme: {
                m2ts: components["schemas"]["URLSchemeInfo"];
                video: components["schemas"]["URLSchemeInfo"];
                download: components["schemas"]["URLSchemeInfo"];
            };
            /** @description ライブ視聴が有効か */
            isEnableLiveStream: boolean;
            /** @description 録画済みの TS ファイルのストリーミングが有効か */
            isEnableTSRecordedStream: boolean;
            /** @description 録画済みのエンコード済みファイルのストリーミングが有効か */
            isEnableEncodedRecordedStream: boolean;
            /** @description ストリーミング設定 */
            streamConfig?: {
                /** @description ライブストリーミング設定 */
                live?: {
                    /** @description ライブ M2TS ストリーミング設定 */
                    m2ts?: components["schemas"]["M2TSStreamParam"][];
                    /** @description ライブ M2TS Low Latency (mpegts.js 用) ストリーミング設定 */
                    m2tsll?: string[];
                    /** @description ライブ WebM ストリーミング設定 */
                    webm?: string[];
                    /** @description ライブ MP4 ストリーミング設定 */
                    mp4?: string[];
                    /** @description ライブ HLS ストリーミング設定 */
                    hls?: string[];
                };
                /** @description 録画済みストリーミング設定 */
                recorded?: {
                    /** @description 録画済み TS ファイルのストリーミング設定 */
                    ts?: {
                        /** @description 録画済み TS ファイルの WebM ストリーミング設定 */
                        webm?: string[];
                        /** @description 録画済み TS ファイルの MP4 ストリーミング設定 */
                        mp4?: string[];
                        /** @description 録画済み TS ファイルの HLS ストリーミング設定 */
                        hls?: string[];
                    };
                    /** @description 録画エンコード済みファイルのストリーミング設定 */
                    encoded?: {
                        /** @description 録画エンコード済みファイルの WebM ストリーミング設定 */
                        webm?: string[];
                        /** @description 録画エンコード済みファイルの MP4 ストリーミング設定 */
                        mp4?: string[];
                        /** @description 録画エンコード済みファイルの HLS ストリーミング設定 */
                        hls?: string[];
                    };
                };
            };
            /** @description kodi hosts */
            kodiHosts?: string[];
        };
        ChannelItems: components["schemas"]["ChannelItem"][];
        /** @description チャンネル情報 */
        ChannelItem: {
            id: components["schemas"]["ChannelId"];
            serviceId: components["schemas"]["ServiceId"];
            networkId: components["schemas"]["NetworkId"];
            /** @description 放送局名 */
            name: string;
            /** @description 放送局名(半角) */
            halfWidthName: string;
            /** @description ロゴデータを持っているか */
            hasLogoData: boolean;
            channelType: components["schemas"]["ChannelType"];
            channel: string;
        } & {
            remoteControlKeyId: unknown;
        };
        /** @description 番組表の放送局データ */
        ScheduleChannleItem: {
            id: components["schemas"]["ChannelId"];
            serviceId: components["schemas"]["ServiceId"];
            networkId: components["schemas"]["NetworkId"];
            /** @description 放送局名 */
            name: string;
            /** @description リモコン番号 */
            remoteControlKeyId?: number;
            /** @description ロゴデータを持っているか */
            hasLogoData: boolean;
            channelType: components["schemas"]["ChannelType"];
        };
        /** @description 番組表の番組データ */
        ScheduleProgramItem: {
            id: components["schemas"]["ProgramId"];
            channelId: components["schemas"]["ChannelId"];
            startAt: components["schemas"]["UnixtimeMS"];
            endAt: components["schemas"]["UnixtimeMS"];
            /** @description 無料放送か */
            isFree: boolean;
            /** @description 番組名 */
            name: string;
            /** @description 番組詳細 */
            description?: string;
            /** @description 番組拡張 */
            extended?: string;
            /** @description 番組拡張 (Mirakurun の extended) */
            rawExtended?: {
                [key: string]: unknown;
            };
            genre1?: components["schemas"]["ProgramGenreLv1"];
            subGenre1?: components["schemas"]["ProgramGenreLv2"];
            genre2?: components["schemas"]["ProgramGenreLv1"];
            subGenre2?: components["schemas"]["ProgramGenreLv2"];
            genre3?: components["schemas"]["ProgramGenreLv1"];
            subGenre3?: components["schemas"]["ProgramGenreLv2"];
            videoType?: components["schemas"]["ProgramVideoType"];
            videoResolution?: components["schemas"]["ProgramVideoResolution"];
            videoStreamContent?: number;
            videoComponentType?: number;
            audioSamplingRate?: components["schemas"]["ProgramAudioSamplingRate"];
            audioComponentType?: number;
        };
        ScheduleProgramItems: components["schemas"]["ScheduleProgramItem"][];
        /** @description 番組表データ */
        Schedule: {
            channel: components["schemas"]["ScheduleChannleItem"];
            programs: components["schemas"]["ScheduleProgramItems"];
        };
        Schedules: components["schemas"]["Schedule"][];
        /** @description 番組検索オプション */
        ScheduleSearchOption: {
            option: components["schemas"]["RuleSearchOption"];
            /** @description 半角文字で取得するか */
            isHalfWidth: boolean;
            /** @description 検索結果取得最大件数 */
            limit?: number;
        };
        /** @description ルール情報 */
        Rules: {
            rules: components["schemas"]["Rule"][];
            /** @description ルール総件数 */
            total: number;
        };
        /** @description ルール */
        Rule: components["schemas"]["AddRuleOption"] & {
            id: components["schemas"]["RuleId"];
            /** @description 予約件数 */
            reservesCnt?: number;
        };
        RuleKeywordItem: {
            id: components["schemas"]["RuleId"];
            keyword: string;
        };
        /** @description ルールキーワード検索結果 */
        RuleKeywordInfo: {
            items: components["schemas"]["RuleKeywordItem"][];
        };
        /** @description ルール追加プション */
        AddRuleOption: {
            /** @description 時刻指定予約か */
            isTimeSpecification: boolean;
            searchOption: components["schemas"]["RuleSearchOption"];
            reserveOption: components["schemas"]["RuleReserveOption"];
            saveOption?: components["schemas"]["ReserveSaveOption"];
            encodeOption?: components["schemas"]["ReserveEncodedOption"];
        };
        /** @description ルール検索オプション */
        RuleSearchOption: {
            /** @description 検索キーワード */
            keyword?: string;
            /** @description 除外検索キーワード */
            ignoreKeyword?: string;
            /** @description 大文字小文字区別有効化 (検索キーワード) */
            keyCS?: boolean;
            /** @description 正規表現 (検索キーワード) */
            keyRegExp?: boolean;
            /** @description 番組名 (検索キーワード) */
            name?: boolean;
            /** @description 概要 (検索キーワード) */
            description?: boolean;
            /** @description 詳細 (検索キーワード) */
            extended?: boolean;
            /** @description 大文字小文字区別有効化 (除外検索キーワード) */
            ignoreKeyCS?: boolean;
            /** @description 正規表現 (除外検索キーワード) */
            ignoreKeyRegExp?: boolean;
            /** @description 番組名 (除外検索キーワード) */
            ignoreName?: boolean;
            /** @description 概要 (除外検索キーワード) */
            ignoreDescription?: boolean;
            /** @description 詳細 (除外検索キーワード) */
            ignoreExtended?: boolean;
            /** @description GR */
            GR?: boolean;
            /** @description BS */
            BS?: boolean;
            /** @description CS */
            CS?: boolean;
            /** @description SKY */
            SKY?: boolean;
            /** @description 放送局 */
            channelIds?: components["schemas"]["ChannelId"][];
            /** @description ジャンル */
            genres?: components["schemas"]["Genre"][];
            /** @description 時刻範囲 */
            times?: components["schemas"]["SearchTime"][];
            /** @description 無料放送か */
            isFree?: boolean;
            /** @description 番組最小時間 (分) */
            durationMin?: number;
            /** @description 番組最大時間 (分) */
            durationMax?: number;
            /** @description 検索対象期間 */
            searchPeriods?: components["schemas"]["SearchPeriod"][];
        };
        /** @description ジャンル設定 */
        Genre: {
            genre: components["schemas"]["ProgramGenreLv1"];
            subGenre?: components["schemas"]["ProgramGenreLv2"];
        };
        /** @description 時刻範囲指定オプション */
        SearchTime: {
            /** @description 開始時刻 1 - 23, 時刻予約の場合は 0 時を 0 とした 0 ~ (60 * 50 * 24) - 1 秒までの開始時刻を指定する */
            start?: number;
            /** @description 開始時刻からの時刻範囲(時) 1 - 23, 時刻予約の場合は秒で時間の長さを指定する 1 ~ 60 * 50 * 24 秒 */
            range?: number;
            /** @description 曜日指定 0x01, 0x02, 0x04, 0x08, 0x10, 0x20 ,0x40 が日〜土に対応するので and 演算で曜日を指定する */
            week: number;
        };
        /** @description 検索対象期間オプション */
        SearchPeriod: {
            startAt: components["schemas"]["UnixtimeMS"];
            endAt: components["schemas"]["UnixtimeMS"];
        };
        /** @description ルール予約オプション */
        RuleReserveOption: {
            /** @description ルールが有効か */
            enable: boolean;
            /** @description 末尾切れを許可するか */
            allowEndLack: boolean;
            /** @description 録画済みの重複番組を排除するか */
            avoidDuplicate: boolean;
            /** @description 重複を避ける期間 */
            periodToAvoidDuplicate?: number;
            tags?: components["schemas"]["RecordedTagId"][];
        };
        /** @description 予約保存オプション */
        ReserveSaveOption: {
            /** @description 親保存ディレクトリ */
            parentDirectoryName?: string;
            /** @description 保存ディレクトリ */
            directory?: string;
            /** @description ファイル名フォーマット */
            recordedFormat?: string;
        };
        /** @description 予約エンコードオプション */
        ReserveEncodedOption: {
            /** @description エンコードモード1 */
            mode1?: string;
            /** @description エンコードモード1親ディレクトリ */
            encodeParentDirectoryName1?: string;
            /** @description エンコードモード1ディレクトリ */
            directory1?: string;
            /** @description エンコードモード2 */
            mode2?: string;
            /** @description エンコードモード2親ディレクトリ */
            encodeParentDirectoryName2?: string;
            /** @description エンコードモード2ディレクトリ */
            directory2?: string;
            /** @description エンコードモード3 */
            mode3?: string;
            /** @description エンコードモード3親ディレクトリ */
            encodeParentDirectoryName3?: string;
            /** @description エンコードモード3ディレクトリ */
            directory3?: string;
            /** @description エンコード後に ts を削除するか */
            isDeleteOriginalAfterEncode: boolean;
        };
        /** @description ルール追加成功応答データ */
        AddedRule: {
            ruleId: components["schemas"]["RuleId"];
        };
        /** @description 手動予約編集オプション */
        EditManualReserveOption: {
            /** @description 末尾切れを許すか */
            allowEndLack: boolean;
            tags?: components["schemas"]["RecordedTagId"][];
            saveOption?: components["schemas"]["ReserveSaveOption"];
            encodeOption?: components["schemas"]["ReserveEncodedOption"];
        };
        /** @description 手動予約オプション */
        ManualReserveOption: components["schemas"]["EditManualReserveOption"] & {
            programId?: components["schemas"]["ProgramId"];
            /** @description 時刻指定オプション */
            timeSpecifiedOption?: {
                /** @description 番組名 */
                name: string;
                channelId: components["schemas"]["ChannelId"];
                startAt: components["schemas"]["UnixtimeMS"];
                endAt: components["schemas"]["UnixtimeMS"];
            };
        };
        /** @description 予約成功応答データ */
        AddedReserve: {
            reserveId: components["schemas"]["ReserveId"];
        };
        /** @description 予約番組情報 */
        ReserveItem: {
            id: components["schemas"]["ReserveId"];
            ruleId?: components["schemas"]["RuleId"];
            isSkip: boolean;
            isConflict: boolean;
            isOverlap: boolean;
            allowEndLack: boolean;
            isTimeSpecified: boolean;
            tags?: components["schemas"]["RecordedTagId"][];
            parentDirectoryName?: string;
            directory?: string;
            recordedFormat?: string;
            encodeMode1?: number;
            encodeParentDirectoryName1?: string;
            encodeDirectory1?: string;
            encodeMode2?: number;
            encodeParentDirectoryName2?: string;
            encodeDirectory2?: string;
            encodeMode3?: number;
            encodeParentDirectoryName3?: string;
            encodeDirectory3?: number;
            isDeleteOriginalAfterEncode: boolean;
            programId?: components["schemas"]["ProgramId"];
            channelId: components["schemas"]["ChannelId"];
            startAt: components["schemas"]["UnixtimeMS"];
            endAt: components["schemas"]["UnixtimeMS"];
            name: string;
            description?: string;
            extended?: string;
            rawExtended?: {
                [key: string]: unknown;
            };
            genre1?: components["schemas"]["ProgramGenreLv1"];
            subGenre1?: components["schemas"]["ProgramGenreLv2"];
            genre2?: components["schemas"]["ProgramGenreLv1"];
            subGenre2?: components["schemas"]["ProgramGenreLv2"];
            genre3?: components["schemas"]["ProgramGenreLv1"];
            subGenre3?: components["schemas"]["ProgramGenreLv2"];
            videoType?: components["schemas"]["ProgramVideoType"];
            videoResolution?: components["schemas"]["ProgramVideoResolution"];
            videoStreamContent?: number;
            videoComponentType?: number;
            audioSamplingRate?: components["schemas"]["ProgramAudioSamplingRate"];
            audioComponentType?: number;
        };
        /** @description 予約情報 */
        Reserves: {
            reserves: components["schemas"]["ReserveItem"][];
            /** @description 予約総件数 */
            total: number;
        };
        /** @description 予約リストitem */
        ReserveListItem: {
            reserveId: components["schemas"]["ReserveId"];
            programId?: components["schemas"]["ProgramId"];
            ruleId?: components["schemas"]["RuleId"];
        };
        /** @description 予約, 除外, 重複, 競合の reserveId のリスト */
        ReserveLists: {
            normal: components["schemas"]["ReserveListItem"];
            conflicts: components["schemas"]["ReserveListItem"];
            skips: components["schemas"]["ReserveListItem"];
            overlaps: components["schemas"]["ReserveListItem"];
        };
        /** @description 予約カウント */
        ReserveCnts: {
            /** @description 通常予約数 */
            normal: number;
            /** @description 競合予約数 */
            conflicts: number;
            /** @description 競合予約数 */
            skips: number;
            /** @description 重複予約数 */
            overlaps: number;
        };
        /** @description 録画情報 */
        Records: {
            records: components["schemas"]["RecordedItem"][];
            /** @description 録画総件数 */
            total: number;
        };
        /** @description 録画番組情報 */
        RecordedItem: {
            id: components["schemas"]["RecordedId"];
            ruleId?: components["schemas"]["RuleId"];
            programId?: components["schemas"]["ProgramId"];
            channelId?: components["schemas"]["ChannelId"];
            startAt: components["schemas"]["UnixtimeMS"];
            endAt: components["schemas"]["UnixtimeMS"];
            /** @description 番組名 */
            name: string;
            /** @description 番組詳細 */
            description?: string;
            /** @description 番組拡張 */
            extended?: string;
            /** @description 番組拡張 (Mirakurun の extended) */
            rawExtended?: {
                [key: string]: unknown;
            };
            genre1?: components["schemas"]["ProgramGenreLv1"];
            subGenre1?: components["schemas"]["ProgramGenreLv2"];
            genre2?: components["schemas"]["ProgramGenreLv1"];
            subGenre2?: components["schemas"]["ProgramGenreLv2"];
            genre3?: components["schemas"]["ProgramGenreLv1"];
            subGenre3?: components["schemas"]["ProgramGenreLv2"];
            videoType?: components["schemas"]["ProgramVideoType"];
            videoResolution?: components["schemas"]["ProgramVideoResolution"];
            videoStreamContent?: number;
            videoComponentType?: number;
            audioSamplingRate?: components["schemas"]["ProgramAudioSamplingRate"];
            audioComponentType?: number;
            /** @description 録画中か */
            isRecording: boolean;
            thumbnails?: components["schemas"]["ThumbnailId"][];
            videoFiles?: components["schemas"]["VideoFile"][];
            dropLog?: components["schemas"]["DropLogFile"];
            tags?: components["schemas"]["RecordedTag"][];
            /** @description エンコード中か */
            isEncoding: boolean;
            /** @description 自動録画削除対象外か */
            isProtected: boolean;
        };
        /** @description 新規追加する録画番組情報 */
        CreateNewRecordedOption: {
            ruleId?: components["schemas"]["RuleId"];
            channelId: components["schemas"]["ChannelId"];
            startAt: components["schemas"]["UnixtimeMS"];
            endAt: components["schemas"]["UnixtimeMS"];
            /** @description 番組名 */
            name: string;
            /** @description 番組詳細 */
            description?: string;
            /** @description 番組拡張 */
            extended?: string;
            genre1?: components["schemas"]["ProgramGenreLv1"];
            subGenre1?: components["schemas"]["ProgramGenreLv2"];
            genre2?: components["schemas"]["ProgramGenreLv1"];
            subGenre2?: components["schemas"]["ProgramGenreLv2"];
            genre3?: components["schemas"]["ProgramGenreLv1"];
            subGenre3?: components["schemas"]["ProgramGenreLv2"];
        };
        /** @description 録画番組情報の新規作成成功応答データ */
        CreatedNewRecorded: {
            recordedId: components["schemas"]["RecordedId"];
        };
        /** @description ビデオファイル情報 */
        VideoFile: {
            id: components["schemas"]["VideoFileId"];
            /** @description ビデオ名 (Web上の表示名) */
            name: string;
            /** @description ビデオファイル名 */
            filename?: string;
            type: components["schemas"]["VideoFileType"];
            /** @description ファイルサイズ */
            size: number;
        };
        /** @description ビデオファイルの長さ */
        VideoFileDuration: {
            /** @description 動画長(秒) */
            duration: number;
        };
        /** @description ドロップログファイル情報 */
        DropLogFile: {
            id: components["schemas"]["DropLogFileId"];
            /** @description エラーカウント */
            errorCnt: number;
            /** @description ドロップカウント */
            dropCnt: number;
            /** @description スクランブルカウント */
            scramblingCnt: number;
        };
        /** @description タグ情報 */
        RecordedTag: {
            id: components["schemas"]["RecordedTagId"];
            /** @description タグ名 */
            name: string;
            /** @description 色 */
            color: string;
        };
        /** @description 録画タグ情報 */
        RecordedTags: {
            tags: components["schemas"]["RecordedTag"][];
            /** @description 予約総件数 */
            total: number;
        };
        /** @description 録画タグ追加プション */
        AddRecordedTagOption: {
            /** @description タグ名 */
            name: string;
            /** @description 色 */
            color: string;
        };
        /** @description 録画番組とタグの関連付けオプション */
        RelateRecordedTagOption: {
            recordedId: components["schemas"]["RecordedId"];
        };
        /** @description タグ追加成功応答データ */
        AddedRecordedTag: {
            tagId: components["schemas"]["RecordedTagId"];
        };
        /** @description recorded が持つ channelId のリスト */
        RecordedChannelListItem: {
            /** @description 録画数 */
            cnt: number;
            channelId: components["schemas"]["ChannelId"];
        };
        /** @description recorded が持つ genre のリスト */
        RecordedGenreListItem: {
            /** @description 録画数 */
            cnt: number;
            genre: components["schemas"]["ProgramGenreLv1"];
        };
        /** @description recorded が持つ検索オプション情報 */
        RecordedSearchOptions: {
            channels: components["schemas"]["RecordedChannelListItem"][];
            genres: components["schemas"]["RecordedGenreListItem"][];
        };
        /** @description kodiへビデオリンクを送信するときのオプション */
        SendVideoLinkToKodiOption: {
            /** @description config の kodi の name */
            kodiName: string;
        };
        /** @description ビデオファイルをアップロード */
        UploadVideoFileOption: {
            recordedId: components["schemas"]["RecordedId"];
            /** @description 親保存ディレクトリ */
            parentDirectoryName: string;
            /** @description 保存ディレクトリ */
            subDirectory?: string;
            /** @description 表示名 */
            viewName: string;
            fileType: components["schemas"]["VideoFileType"];
            /** Format: binary */
            file: string;
        };
        /** @description バージョン情報 */
        Version: {
            version: string;
        };
        /** @description エンコードプログラム情報 */
        EncodeProgramItem: {
            id: components["schemas"]["EncodeId"];
            /** @description エンコード名 */
            mode: string;
            recorded: components["schemas"]["RecordedItem"];
            /** @description 進捗 */
            percent?: number;
            /** @description ログ */
            log?: string;
        };
        /** @description エンコード情報 */
        EncodeInfo: {
            runningItems: components["schemas"]["EncodeProgramItem"][];
            waitItems: components["schemas"]["EncodeProgramItem"][];
        };
        /** @description エンコード追加時のオプション */
        AddEncodeProgramOption: {
            recordedId: components["schemas"]["RecordedId"];
            sourceVideoFileId: components["schemas"]["VideoFileId"];
            /** @description 親ディレクトリ名 config recorded の name */
            parentDir: string;
            /** @description 親ディレクトリ以下のディレクトリ設定 */
            directory?: string;
            /** @description エンコードプリセット名 config encode の name */
            mode: string;
            /** @description 元ファイルを削除するか */
            removeOriginal: boolean;
        };
        /** @description エンコード手動追加時のオプション */
        AddManualEncodeProgramOption: {
            recordedId: components["schemas"]["RecordedId"];
            sourceVideoFileId: components["schemas"]["VideoFileId"];
            /** @description 親ディレクトリ名 config recorded の name, isSaveSameDirectory が false の場合は必須 */
            parentDir?: string;
            /** @description 親ディレクトリ以下のディレクトリ設定 */
            directory?: string;
            /** @description ソースビデオファイルと同じ場所に保存するか */
            isSaveSameDirectory?: boolean;
            /** @description エンコードプリセット名 config encode の name */
            mode: string;
            /** @description 元ファイルを削除するか */
            removeOriginal: boolean;
        };
        /** @description エンコード追加成功応答データ */
        AddedEncode: {
            encodeId: components["schemas"]["EncodeId"];
        };
        /** @description ストリーム情報 */
        StreamInfoItem: {
            streamId: components["schemas"]["StreamId"];
            type: components["schemas"]["StreamType"];
            /** @description ストリーミング設定 */
            mode: number;
            /** @description 放送波が有効か (HLS 形式の場合有効) */
            isEnable: boolean;
            channelId: components["schemas"]["ChannelId"];
            videoFileId?: components["schemas"]["VideoFileId"];
            recordedId?: components["schemas"]["RecordedId"];
            /** @description ストリーミング番組名 */
            name: string;
            startAt: components["schemas"]["UnixtimeMS"];
            endAt: components["schemas"]["UnixtimeMS"];
            /** @description ストリーミング番組詳細 */
            description?: string;
            /** @description ストリーミング番組拡張 */
            extended?: string;
        };
        StreamInfo: {
            items: components["schemas"]["StreamInfoItem"][];
        };
        /** @description ストリーム開始情報 */
        StartStreamInfo: {
            streamId: components["schemas"]["StreamId"];
        };
        /** @description ストレージ使用状況 */
        StorageItem: {
            /** @description ディスク名 */
            name: string;
            /** @description 空き容量 (byte) */
            available: number;
            /** @description 使用量 (byte) */
            used: number;
            /** @description 総容量 (byte) */
            total: number;
        };
        /** @description ストレージ情報 */
        StorageInfo: {
            items: components["schemas"]["StorageItem"][];
        };
        Error: {
            /**
             * Format: int32
             * @description HTTPステータスコード
             */
            code: number;
            /** @description エラーメッセージ */
            message: string;
            /** @description Error */
            errors?: string;
        };
    };
    parameters: {
        /** @description offset */
        Offset: number;
        /** @description limit */
        Limit: number;
        /** @description 開始時刻 */
        StartAt: components["schemas"]["UnixtimeMS"];
        /** @description 終了時刻 */
        EndAt: components["schemas"]["UnixtimeMS"];
        /** @description 取得日数 */
        Days: number;
        /** @description 追加時間 (ms) */
        AddtionTime: components["schemas"]["UnixtimeMS"];
        /** @description 半角文字で取得するか */
        IsHalfWidth: boolean;
        /** @description rawExtended が必要か */
        NeedsRawExtended: boolean;
        /** @description 無料放送のみ取得するか (true: 無料放送, false: 有料放送, 無指定: 全て) */
        IsFreeProgram: boolean;
        /** @description 放送局 id */
        QueryChannelId: components["schemas"]["ChannelId"];
        /** @description recorded id */
        QueryRecordedId: components["schemas"]["RecordedId"];
        /** @description ルールid */
        QueryRuleId: components["schemas"]["RuleId"];
        /** @description ジャンル */
        QueryProgramGenre: components["schemas"]["ProgramGenreLv1"];
        /** @description キーワード */
        QueryKeyword: string;
        /** @description オリジナルファイルを含むか */
        QueryHasOriginalFile: boolean;
        /** @description name */
        QueryName: string;
        /** @description 除外する RecordedTagId */
        QueryExcludeRecordedTagId: string[];
        /** @description GR */
        requiredGR: boolean;
        /** @description BS */
        requiredBS: boolean;
        /** @description CS */
        requiredCS: boolean;
        /** @description SKY */
        requiredSKY: boolean;
        /** @description 予約情報取得タイプ */
        GetReserveType: "all" | "normal" | "conflict" | "skip" | "overlap";
        /** @description ファイルをダウンロードするか */
        IsDownload: boolean;
        /** @description 逆順で取得するか */
        IsReverse: boolean;
        /** @description ファイル最大サイズ (kByte) */
        LogFileMaxSize: number;
        /** @description 放送局 id */
        PathChannelId: components["schemas"]["ChannelId"];
        /** @description program id */
        PathProgramId: components["schemas"]["ProgramId"];
        /** @description 予約id */
        PathReserveId: number;
        /** @description ルールid */
        PathRuleId: number;
        /** @description thumbnail id */
        PathThumbnailId: number;
        /** @description recorded id */
        PathRecordedId: number;
        /** @description recorded tag id */
        PathRecordedTagId: number;
        /** @description video file id */
        PathVideoFileId: number;
        /** @description drop log file id */
        PathDropLogFileId: number;
        /** @description エンコード id */
        PathEncodeId: number;
        /** @description ストリーム id */
        PathStreamId: components["schemas"]["StreamId"];
        /** @description ストリーミング設定 */
        StreamMode: number;
        /** @description 再生位置 */
        StreamPlayPosition: number;
        /** @description 半角文字で取得するか */
        IPTVIsHalfWidth: boolean;
        /** @description 取得日数 */
        IPTVDays: number;
    };
}
export interface operations {
}
export interface external {
}
//# sourceMappingURL=epgstation.d.ts.map